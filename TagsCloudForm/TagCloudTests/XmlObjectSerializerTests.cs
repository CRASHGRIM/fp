using System.IO;
using System.Xml.Serialization;
using FluentAssertions;
using NUnit.Framework;
using TagsCloudForm;
using TagsCloudForm.Common;

namespace TagsCloudTests
{
    [TestFixture]
    public class XmlObjectSerializerTests
    {
        [Test]
        public void Serializer_ShouldSerialize_StringAsBuiltIn()
        {
            var settings = new AppSettings{ImagesDirectory = "directory", ImageSettings = new ImageSettings{ Height = 600, Width = 600} };
            var serializer = new XmlObjectSerializer();

            var serialized = serializer.Serialize(settings);

            byte[] builtInSerialized;

            using (var ms = new MemoryStream())
            {
                var builtInSerializer = new XmlSerializer(typeof(AppSettings));
                builtInSerializer.Serialize(ms, settings);
                builtInSerialized = ms.ToArray();

            }

            serialized.Should().BeEquivalentTo(builtInSerialized);
        }

        [Test]
        public void Serializer_ShouldDeserialize_AsBuiltIn()
        {
            var file = new byte[] { 0x3c, 0x3f, 0x78, 0x6d, 0x6c, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e
                , 0x3d, 0x22, 0x31, 0x2e, 0x30, 0x22, 0x3f, 0x3e, 0x0a, 0x3c, 0x41, 0x70, 0x70, 0x53, 0x65, 0x74
                , 0x74, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x78, 0x6d, 0x6c, 0x6e, 0x73, 0x3a, 0x78, 0x73, 0x69, 0x3d
                , 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x77, 0x33, 0x2e, 0x6f
                , 0x72, 0x67, 0x2f, 0x32, 0x30, 0x30, 0x31, 0x2f, 0x58, 0x4d, 0x4c, 0x53, 0x63, 0x68, 0x65, 0x6d
                , 0x61, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x20, 0x78, 0x6d, 0x6c, 0x6e
                , 0x73, 0x3a, 0x78, 0x73, 0x64, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77
                , 0x77, 0x2e, 0x77, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x32, 0x30, 0x30, 0x31, 0x2f, 0x58, 0x4d
                , 0x4c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0x3e, 0x0a, 0x20, 0x20, 0x3c, 0x49, 0x6d, 0x61
                , 0x67, 0x65, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x3e, 0x2e, 0x3c, 0x2f
                , 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x3e
                , 0x0a, 0x20, 0x20, 0x3c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67
                , 0x73, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x3e, 0x38, 0x30
                , 0x30, 0x3c, 0x2f, 0x57, 0x69, 0x64, 0x74, 0x68, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x48
                , 0x65, 0x69, 0x67, 0x68, 0x74, 0x3e, 0x36, 0x30, 0x30, 0x3c, 0x2f, 0x48, 0x65, 0x69, 0x67, 0x68
                , 0x74, 0x3e, 0x0a, 0x20, 0x20, 0x3c, 0x2f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74
                , 0x69, 0x6e, 0x67, 0x73, 0x3e, 0x0a, 0x3c, 0x2f, 0x41, 0x70, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69
                , 0x6e, 0x67, 0x73, 0x3e };
            var serializer = new XmlObjectSerializer();

            var deserialized = serializer.Deserialize<AppSettings>(file);

            AppSettings builtInDeserialized;

            using (var ms = new MemoryStream(file))
                builtInDeserialized = (AppSettings)new XmlSerializer(typeof(AppSettings)).Deserialize(ms);

            deserialized.Should().BeEquivalentTo(builtInDeserialized);
        }
    }
}
